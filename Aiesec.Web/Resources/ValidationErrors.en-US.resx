<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Current password is not correct" xml:space="preserve">
    <value>Current password is not correct</value>
  </data>
  <data name="Email is already is use" xml:space="preserve">
    <value>Email is already is use</value>
  </data>
  <data name="EmailWrongFormat" xml:space="preserve">
    <value>Wrong format of email</value>
  </data>
  <data name="ErrBiographyMaxLengthPolicy" xml:space="preserve">
    <value>Biography max length is 500 characters</value>
  </data>
  <data name="ErrDateWrongFormat" xml:space="preserve">
    <value>Format of date is invalid</value>
  </data>
  <data name="ErrEnterTheSameValueAgain" xml:space="preserve">
    <value>Enter the same value again</value>
  </data>
  <data name="ErrEnterValidNumber" xml:space="preserve">
    <value>Enter a valid number</value>
  </data>
  <data name="ErrFirstName" xml:space="preserve">
    <value>First name is not valid</value>
  </data>
  <data name="ErrFirstNameMaxLength" xml:space="preserve">
    <value>First name max length is 50 characters</value>
  </data>
  <data name="ErrLastName" xml:space="preserve">
    <value>Last name is not valid</value>
  </data>
  <data name="ErrLastNameMaxLength" xml:space="preserve">
    <value>Last name max length is 50 characters</value>
  </data>
  <data name="ErrMaxLenght" xml:space="preserve">
    <value>Maximum number of characters is 100</value>
  </data>
  <data name="ErrMaxNumberOfCharacters" xml:space="preserve">
    <value>Maximum number of characters is {0}</value>
  </data>
  <data name="ErrMinLenghtPassword" xml:space="preserve">
    <value>Password must be at least 8 characters</value>
  </data>
  <data name="ErrMinLenghtPasswordConfirm" xml:space="preserve">
    <value>Password confirm must be at least 8 characters</value>
  </data>
  <data name="ErrMinMaxName" xml:space="preserve">
    <value>Name must be at least 5 characters</value>
  </data>
  <data name="ErrMinMaxShortName" xml:space="preserve">
    <value>Short name must be at least 2 characters</value>
  </data>
  <data name="ErrMinNumberOfCharacters" xml:space="preserve">
    <value>Minimum number of characters is {0}</value>
  </data>
  <data name="ErrNoAddress" xml:space="preserve">
    <value>Address is required</value>
  </data>
  <data name="ErrNoBirthDate" xml:space="preserve">
    <value>Date of birth is required</value>
  </data>
  <data name="ErrNoCapacity" xml:space="preserve">
    <value>Capacity is required</value>
  </data>
  <data name="ErrNoCity" xml:space="preserve">
    <value>City is required</value>
  </data>
  <data name="ErrNoConfirmPassword" xml:space="preserve">
    <value>Password confirm is required</value>
  </data>
  <data name="ErrNoContactAgent" xml:space="preserve">
    <value>Contact agent is required</value>
  </data>
  <data name="ErrNoContactEmail" xml:space="preserve">
    <value>Contact email is required</value>
  </data>
  <data name="ErrNoCountry" xml:space="preserve">
    <value>Country is required</value>
  </data>
  <data name="ErrNoCurrentPassword" xml:space="preserve">
    <value>Current passwrod is required</value>
  </data>
  <data name="ErrNoEmail" xml:space="preserve">
    <value>Email is required</value>
  </data>
  <data name="ErrNoEstablishmentDate" xml:space="preserve">
    <value>Date of establishment is required</value>
  </data>
  <data name="ErrNoFirstName" xml:space="preserve">
    <value>Firstname is required</value>
  </data>
  <data name="ErrNoFunctionalField" xml:space="preserve">
    <value>Functional field is required</value>
  </data>
  <data name="ErrNoGender" xml:space="preserve">
    <value>Gender is required</value>
  </data>
  <data name="ErrNoJIB" xml:space="preserve">
    <value>JIB is required</value>
  </data>
  <data name="ErrNoLastName" xml:space="preserve">
    <value>Lastname is required</value>
  </data>
  <data name="ErrNoLocalCommittee" xml:space="preserve">
    <value>Local committee is required</value>
  </data>
  <data name="ErrNoName" xml:space="preserve">
    <value>Name is required</value>
  </data>
  <data name="ErrNoNewPassword" xml:space="preserve">
    <value>New password is required</value>
  </data>
  <data name="ErrNoPassword" xml:space="preserve">
    <value>Password is required</value>
  </data>
  <data name="ErrNoPasswordConfirm" xml:space="preserve">
    <value>Password confirm is required</value>
  </data>
  <data name="ErrNoPhoneNumber" xml:space="preserve">
    <value>Phone number is required</value>
  </data>
  <data name="ErrNoPhoneNumberCode" xml:space="preserve">
    <value>Country phone code is required</value>
  </data>
  <data name="ErrNoPhoneNumberRegex" xml:space="preserve">
    <value>Phone number regex is required</value>
  </data>
  <data name="ErrNoPostalCode" xml:space="preserve">
    <value>Postal code is required</value>
  </data>
  <data name="ErrNoRole" xml:space="preserve">
    <value>Role is required</value>
  </data>
  <data name="ErrNoShortName" xml:space="preserve">
    <value>Short name is required</value>
  </data>
  <data name="ErrNotSamePasswordConfirm" xml:space="preserve">
    <value>Passwords are not match</value>
  </data>
  <data name="ErrNoUsername" xml:space="preserve">
    <value>Username is required</value>
  </data>
  <data name="ErrPasswordPolicy" xml:space="preserve">
    <value>Password must contain at least one number, lowercase letter, uppercase letter and special character</value>
  </data>
  <data name="ErrPhoneNumberPolicy" xml:space="preserve">
    <value>Phone number format is incorrect</value>
  </data>
  <data name="ErrThisFieldIsRequired" xml:space="preserve">
    <value>This field is required</value>
  </data>
  <data name="ErrUniqueEmail" xml:space="preserve">
    <value>Email is not available</value>
  </data>
  <data name="ErrUniquePhoneNumber" xml:space="preserve">
    <value>Phone number is not available</value>
  </data>
  <data name="ErrUniqueUsername" xml:space="preserve">
    <value>Username is not available</value>
  </data>
  <data name="ErrUrl" xml:space="preserve">
    <value>Wrong url</value>
  </data>
  <data name="ErrUserNameExists" xml:space="preserve">
    <value>User name '{0}' is already taken.</value>
  </data>
  <data name="ErrUsernamePolicy" xml:space="preserve">
    <value>Username format must be firstname_lastname</value>
  </data>
  <data name="SorryTryAgain" xml:space="preserve">
    <value>Sorry, looks like there are some errors detected, please try again.</value>
  </data>
</root>